import pandas as pd
import numpy as np
import os

path_dir = os.getcwd()

buy_time = pd.Timestamp('10:00:00').time()
sell_time = pd.Timestamp('15:00:00').time()
last_time = pd.Timestamp('16:00:00').time()

months =["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

ce_strike = []
pe_strike = []
ce_price  = []
pe_price  = []
buy_sell  = []
date      = []

def _nifty(year, month):
    path_nifty = path_dir + "\\" +str(year) + "\\Monthly Segregated\\" + month + "\\NIFTY.csv"
    fields_nifty = ['nifty','date','time', 'Open', 'High', 'Low', 'Close','Volume']
    nifty = pd.read_csv(path_nifty, names=fields_nifty)
    nifty['time'] = pd.to_datetime(nifty['time']).dt.time
    nifty['date'] = pd.to_datetime(nifty['date'], format='%Y%m%d').dt.date
    nifty['mean'] = (nifty["Open"] + nifty["Close"])/2

    return nifty

def _path_ce_pe(year, month, straddle_point):
    path_ce = path_dir + "\\" +str(year) + "\\" + month + "\\CE " + str(straddle_point) + ".csv"
    path_pe = path_dir + "\\" +str(year) + "\\" + month + "\\PE " + str(straddle_point) + ".csv"
    return path_ce, path_pe

def _path_ce_pe_check(path_ce, path_pe):
    if os.path.isfile(path_ce): pass
    else: return False
    if os.path.isfile(path_pe): pass
    else: return False
    return True

def _ce_pe(path_ce, path_pe):
    head = ["CE/PE", "date", "time", "Open", "high", "Low", "Close", "Volume"]
    ce = pd.read_csv(path_ce, names=head)
    pe = pd.read_csv(path_pe, names=head)
    ce['time'] = pd.to_datetime(ce['time']).dt.time
    pe['time'] = pd.to_datetime(pe['time']).dt.time
    ce['date'] = pd.to_datetime(ce['date']).dt.date
    pe['date'] = pd.to_datetime(pe['date']).dt.date
    ce["mean"] = (ce["Open"]+ce["Close"])/2
    pe["mean"] = (pe["Open"]+pe["Close"])/2

    return ce, pe

def _update_trades(d, ceprice, peprice, straddle_point, bo):
    date.append(d)
    ce_strike.append("CE " + str(straddle_point))
    pe_strike.append("PE " + str(straddle_point))
    ce_price.append(ceprice)
    pe_price.append(peprice)
    buy_sell.append(bo)
    

for year in range(2014,2015):
    for month in months:
        
        nifty = _nifty(year,month)

        nifty["mean"]=nifty["mean"].rolling(45).mean()

        straddle_point = nifty[["date","mean"]][nifty["time"]==buy_time]
        straddle_point["mean"] = round(straddle_point["mean"]/100)*100 

        for ind, row in straddle_point.iterrows():

            path_ce, path_pe = _path_ce_pe(2014, "April", int(row["mean"]))   
            if(_path_ce_pe_check(path_ce, path_pe)==False): continue
            ce, pe = _ce_pe(path_ce, path_pe) 

            ce=ce[ce["date"]==row["date"]]
            pe=pe[pe["date"]==row["date"]]

            if ce.empty or pe.empty: continue
                        

            ce_buy = ce[ce["time"]==buy_time]
            pe_buy = pe[pe["time"]==buy_time]
            ce_sell = ce[ce["time"]==sell_time]
            pe_sell = pe[pe["time"]==sell_time]

            if ce_buy.empty or ce_sell.empty or pe_buy.empty or pe_sell.empty: continue
            
            _update_trades(str(row["date"]), float(ce_buy["mean"]), float(pe_buy["mean"]), int(row["mean"]), 1)

            _update_trades(str(row["date"]), float(ce_sell["mean"]), float(pe_sell["mean"]), int(row["mean"]), 0)
            

trades = pd.DataFrame((zip(date, ce_strike,ce_price,pe_strike,pe_price,buy_sell)), columns=["date", "CE", "CE_Price", "PE", "PE_Price", "Buy/Sell"])
print(trades.head())

peenal = 0
for ind, row in trades.iterrows():
    if row["Buy/Sell"]==0:
        peenal += (row["CE_Price"] + row["PE_Price"])
    else:
        peenal -= (row["CE_Price"] + row["PE_Price"])

print(len(trades))
print(peenal)
